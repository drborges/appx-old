package appx_test

import (
	"appengine/aetest"
	"appengine/datastore"
	"github.com/drborges/appx"
	. "github.com/smartystreets/goconvey/convey"
	"testing"
)

func TestDatastore(t *testing.T) {
	c, _ := aetest.NewContext(nil)
	defer c.Close()

	Convey("appx.Datastore", t, func() {
		Convey("Load", func() {
			Convey("Given I have a model with StringID key saved in datastore", func() {
				tag := &Tag{Name: "golang", Owner: "Borges"}
				key, _ := appx.NewKey(c, tag)
				datastore.Put(c, key, tag)
				tag.SetEntityKey(key)

				Convey("When I load it using appx.Datastore", func() {
					loadedTag := Tag{Name: "golang"}
					err := appx.NewDatastore(c).Load(&loadedTag)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the data is loaded from datastore", func() {
							So(&loadedTag, ShouldResemble, tag)

							Convey("Then the model has its key resolved", func() {
								So(loadedTag.EntityKey(), ShouldNotBeNil)
							})
						})
					})
				})
			})

			Convey("Given I have a model with IntID key saved in datastore", func() {
				account := &Account{Id: 123, Name: "Borges"}
				key, _ := appx.NewKey(c, account)
				datastore.Put(c, key, account)
				account.SetEntityKey(key)

				Convey("When I load it using appx.Datastore", func() {
					loadedAccount := Account{Id: 123}
					err := appx.NewDatastore(c).Load(&loadedAccount)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the data is loaded from datastore", func() {
							So(&loadedAccount, ShouldResemble, account)

							Convey("Then the model has its key resolved", func() {
								So(loadedAccount.EntityKey(), ShouldNotBeNil)
							})
						})
					})
				})
			})

			Convey("Given I have a model with auto generated key saved in datastore", func() {
				post := &Post{Description: "This is gonna be awesome!"}
				incompleteKey, _ := appx.NewKey(c, post)
				key, _ := datastore.Put(c, incompleteKey, post)
				post.SetEntityKey(key)

				Convey("When I load it with a key using appx.Datastore", func() {
					loadedPost := Post{}
					loadedPost.SetEntityKey(key)
					err := appx.NewDatastore(c).Load(&loadedPost)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the data is loaded from datastore", func() {
							So(&loadedPost, ShouldResemble, post)

							Convey("Then the model has its key resolved", func() {
								So(loadedPost.EntityKey(), ShouldNotBeNil)
							})
						})
					})
				})
			})

			Convey("Given I have a model missing an auto generated key", func() {
				loadedPost := Post{}

				Convey("When I try to load it from datastore", func() {
					err := appx.NewDatastore(c).Load(&loadedPost)

					Convey("Then ErrMissingAutoGeneratedKey is returned", func() {
						So(err, ShouldEqual, appx.ErrUnresolvableKey)
						So(loadedPost.EntityKey(), ShouldBeNil)
					})
				})
			})
		})

		Convey("LoadAll", func() {
			Convey("Given I have a few entities in datastore", func() {
				tags := []*Tag{
					&Tag{Name: "golang", Owner: "Borges"},
					&Tag{Name: "swift", Owner: "Diego"},
				}

				appx.NewDatastore(c).CreateAll(tags)

				Convey("When I load all of them", func() {
					loadedTags := []*Tag{
						&Tag{Name: "golang"},
						&Tag{Name: "swift"},
					}

					err := appx.NewDatastore(c).LoadAll(loadedTags)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then entities have their data loaded", func() {
							So(loadedTags, ShouldResemble, tags)
						})
					})
				})
			})
		})

		Convey("Update", func() {
			Convey("Given I have a model with StringID key", func() {
				tag := Tag{Name: "golang", Owner: "Borges"}

				Convey("When I use appx.Datastore.Put to save it into datastore", func() {
					err := appx.NewDatastore(c).Update(&tag)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the key is set back to the model", func() {
							So(tag.EntityKey().String(), ShouldEqual, "/Tags,golang")

							Convey("Then I am able to lookup the information from datastore", func() {
								loadedTag := Tag{}
								loadedTag.SetEntityKey(tag.EntityKey())
								datastore.Get(c, loadedTag.EntityKey(), &loadedTag)

								So(loadedTag, ShouldResemble, tag)
							})
						})
					})
				})
			})

			Convey("Given I have a model with invalid metadata", func() {
				invalidModel := ModelMissingKind{}

				Convey("When I update it", func() {
					err := appx.NewDatastore(c).Update(&invalidModel)

					Convey("Then it fails with an error", func() {
						So(err, ShouldNotBeNil)

						Convey("Then the key is not set back to the model", func() {
							So(invalidModel.EntityKey(), ShouldBeNil)
						})
					})
				})
			})
		})

		Convey("Create", func() {
			Convey("Given I have a model with auto generated key", func() {
				post := Post{Description: "An awesome post about appx package"}

				Convey("When I create it", func() {
					err := appx.NewDatastore(c).Create(&post)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the key is set back to the model", func() {
							So(post.EntityKey().String(), ShouldNotBeNil)
							So(post.EntityKey().String(), ShouldNotEqual, "/Posts,0")

							Convey("Then I am able to lookup the information from datastore", func() {
								loadedPost := Post{}
								loadedPost.SetEntityKey(post.EntityKey())
								datastore.Get(c, loadedPost.EntityKey(), &loadedPost)

								So(loadedPost, ShouldResemble, post)
							})
						})
					})
				})
			})

			Convey("Given I have a model with invalid metadata", func() {
				invalidModel := ModelMissingKind{}

				Convey("When I create it", func() {
					err := appx.NewDatastore(c).Create(&invalidModel)

					Convey("Then it fails with an error", func() {
						So(err, ShouldNotBeNil)

						Convey("Then the key is not set back to the model", func() {
							So(invalidModel.EntityKey(), ShouldBeNil)
						})
					})
				})
			})
		})

		Convey("CreateAll", func() {
			Convey("Given I have a few models", func() {
				post1 := &Post{Description: "Post 1"}
				post2 := &Post{Description: "Post 2"}
				post3 := &Post{Description: "Post 3"}
				posts := []*Post{post1, post2, post3}

				Convey("When I create all models in a slice", func() {
					err := appx.NewDatastore(c).CreateAll(posts)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the key is set back to the models", func() {
							So(post1.EntityKey().String(), ShouldNotBeNil)
							So(post1.EntityKey().String(), ShouldNotEqual, "/Posts,0")

							So(post2.EntityKey().String(), ShouldNotBeNil)
							So(post2.EntityKey().String(), ShouldNotEqual, "/Posts,0")

							So(post3.EntityKey().String(), ShouldNotBeNil)
							So(post3.EntityKey().String(), ShouldNotEqual, "/Posts,0")
						})
					})
				})
			})
		})

		Convey("Delete", func() {
			Convey("Given I have a model saved in datastore", func() {
				tag := Tag{Name: "golang", Owner: "Borges"}

				Convey("When I delete it", func() {
					err := appx.NewDatastore(c).Delete(&tag)

					Convey("Then it succeeds", func() {
						So(err, ShouldBeNil)

						Convey("Then the model does not exist in datastore", func() {
							err = datastore.Get(c, tag.EntityKey(), nil)
							So(err, ShouldNotBeNil)
						})
					})
				})
			})
		})
	})
}
